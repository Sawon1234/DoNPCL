{"name":"DoNPCL","body":"### Welcome to GitHub Pages.\r\nDoNPCL is an implementation of the Difference of Normals (DoN) operator as a PCL feature. The DoN is a scale-based feature that may be used to perform segmentation of points in an unorganized pointcloud by scale, and is useful for isolating objects of known scale from a dense scene.\r\n\r\n### Requirements\r\n\r\nYou will need the following before you can compile DoNPCL:\r\n\r\n* [PCL](http://pointclouds.org/downloads/)\r\n\r\nIn addition for the example code you need the following:\r\n\r\n* [Boost program-options module](http://www.boost.org/users/download/)\r\n\r\n### Compiling\r\nThe DoNPCL source code uses a standard PCL feature layout, using CMake for the build system. To configure the project, and compile the module, from within the downloaded/checked out source code folder:\r\n\r\n```\r\n$ mkdir build\r\n$ cd build\r\n$ cmake ..\r\n$ make\r\n```\r\n\r\nThis will build the main module, and the example code.\r\n\r\n### Getting Started\r\nIncluded with the DoNPCL module are two examples. Calculating DoN requires calculating normals for the point cloud at various scales, one of the examples calculates the normals using the CPU while the other uses GPU processing (GPU is experimental and is likely to run out of memory for large pointclouds).\r\n\r\n### Running the example (`example_pcl_don.cpp`)\r\n\r\nThe example code can find the DoN features for a pointcloud, and perform various useful functions on the results. The only required parameters are:\r\n\r\n```\r\nsmallscale - the small scale to use in the DoN filter (e.g 0.1m).\r\nlargescale - the large scale to use in the DoN filter (e.g. 1.0m).\r\ninfile - the file to read a point cloud from (PCD).\r\noutfile - the file to write the DoN point cloud & normals to (PCD).\r\n```\r\n\r\nRunning the example program with only these parameters will result in a pointcloud annotated with a DoN vector field, i.e. the (unit vector) difference of the normals between the two scales. There are also a set of optional parameters that will perform additional operations on the resulting vector field, they are described in more detail below:\r\n\r\n```\r\nmagthreshold - po::value<double>(&threshold), \"the minimum DoN magnitude to filter by\r\nsegment - segment scene into clusters with given distance tolerance.\r\nmeshclusters - create meshes for the clusters found using segment mode.\r\napprox - voxelization factor of pointcloud to use in approximation of normals.\r\n```\r\n\r\n### Calculating the DoN Vector Field\r\n\r\nFor example, running the program on our example point cloud:\r\n\r\n`example_pcl_don --smallscale 0.1 --largescale 1.0 --infile input.pcd --output output.pcd`\r\n\r\n![Input pointcloud input.pcd](inputdon.png)\r\n\r\nThe following vector annotated pointcloud is created - visualized using PCL's pcd_viewer, where the magnitude of the DoN vector field is visualized using a colour map.\r\n\r\n![Output DoN annotated vector field](outputdon.png)\r\n\r\n### Thresholding the DoN Vector Field\r\n\r\n![Input pointcloud input.pcd](inputdonseg.png) ![Output DoN thresholded point cloud](outputdonseg.png)\r\n\r\nWe can use the DoN vector field to isolate objects that fit within the scales we used when calculating the DoN vector field, by thresholding the magnitude of the DoN vector at each point. For example,\r\n\r\n`example_pcl_don --smallscale 0.2 --largescale 2.0 --magthreshold 0.25 --infile input.pcd --output output.pcd`\r\n\r\nNotice the new parameter `magthreshold`, this gives a minimum magnitude threshold for the DoN vector field. DoN vectors are unit vectors, meaning the magnitude is in the range [0,1].\r\n\r\n### Clustering the DoN Vector Field\r\n\r\n![Input pointcloud input.pcd](inputdoncluster.png) ![Output clusters found](outputdoncluster.png)\r\n\r\nOnce we have thresholded the scene, we are often left with objects nicely isolated into clusters/connected component groupings. We can use a simple clustering method to cluster all points within a distance tolerance of each other using the `segment` mode:\r\n\r\n`example_pcl_don --smallscale 0.2 --largescale 2.0 --magthreshold 0.25 --segment 0.2 --infile input.pcd --output output.pcd`\r\n\r\n### References\r\nPlease reference the following when using this method in a published paper/conference proceedings.\r\n* [Automatic Urban Modelling using Mobile Urban LIDAR Data](https://qspace.library.queensu.ca/handle/1974/5443)","tagline":"Difference of Normals PCL Implementation","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}